" My personal vimrc file.
"
" Maintainer:	Andrea Riciputi <andrea.riciputi@gmail.com>
"

" I like fish, but vim doesn't
if &shell =~# 'fish$'
    set shell=sh
endif

set nocompatible        " Vim is more than Vi
filetype off " Required to prevent possible incompatibilities

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.

" ----------------------------------------
" Plugins I use to make Vim a better place
" ----------------------------------------

Plugin 'ervandew/supertab'                            " SuperTab
Plugin 'henrik/vim-indexed-search'                    " Display #/N matches when searching
Plugin 'jlanzarotta/bufexplorer'                      " BufferExplorer
Plugin 'plytophogy/vim-diffchanges'                   " Shows changes since the last save
Plugin 'luochen1990/rainbow'                          " Rainbow parenthesis
Plugin 'mrrech/snipmate.vim'                          " Snippets
Plugin 'scrooloose/nerdcommenter'                     " Make comment/uncomment easy
Plugin 'tpope/vim-capslock'                           " Capslock without capslock key
Plugin 'tpope/vim-surround'                           " Make changing surround chars easier
Plugin 'dracula/vim'                                  " Dracula colorscheme
Plugin 'maxbrunsfeld/vim-yankstack'                   " Kill-ring please!

" --------------------------
" File-type specific plugins
"
" If you ever need other file-type specific plugins have a look at:
" https://github.com/sheerun/vim-polyglot
" --------------------------

Plugin 'chrisbra/csv.vim'                             " CSV plugin
Plugin 'dag/vim-fish'                                 " Support for fish-shell scripts
Plugin 'pangloss/vim-javascript'                      " Better Javascript syntax and indent
Plugin 'lifepillar/pgsql.vim'                         " PostgreSQL syntax and indent
Plugin 'mbertheau/jpythonfold.vim'                    " Better folding for Python
Plugin 'vim-python/python-syntax'                     " Better Python syntax highlighting
Plugin 'vim-scripts/indentpython.vim'                 " Better Python indentation
Plugin 'jeetsukumaran/vim-pythonsense'                " Better Python motion

" ----------------------
" External tools plugins
" ----------------------

Plugin 'tpope/vim-fugitive'                           " Git integration
Plugin 'mhinz/vim-grepper'                            " Grep-like tool integration
Plugin 'rizzatti/dash.vim'                            " Dash - Vim integration
Plugin 'ludovicchabant/vim-gutentags'                 " Manage tags (via ctags)
Plugin 'w0rp/ale'                                     " Syntax checking and linting
Plugin 'tpope/vim-dispatch'                           " Async task for vim
Plugin 'janko-m/vim-test'                             " Run tests from inside vim

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"
" Platform recognition settings
"
let s:uname=''
if has('unix')
    let s:uname = system('uname | tr -d "\n"') " Get platform name (stripping the trailing newline)
endif

"
" Common option settings
"

set backspace=indent,eol,start       " allow backspacing over everything in insert mode

set hidden              " hide buffers instead of closing
set nobackup		" do not keep a backup file
set history=1000	" keep 1000 lines of command line history
set ruler		" show the cursor position all the time
set cursorline          " show the cursor line
set showcmd		" display incomplete commands
set tildeop             " set tilde as operator
set encoding=utf-8      " set character enconding to utf-8
set scrolloff=2         " keep always 2 lines of context when scrolling
set textwidth=0         " disable automatic line wrap
set viminfo='100,<50,:100,s10,h " things to remember (see :he viminfo)
set formatoptions+=j    " remove comment chars when joining two comment lines

" Set status bar options
set laststatus=2        " show the status line always

" Set up tab stop machinery
"set tabstop=8           " this is the default, i set it anyway just for documentation
set shiftwidth=4        " set indetation to 4 characters
set expandtab           " expand <TAB> char to spaces

set autoindent          " set autoindent on
set copyindent          " copy the previous indentation on autoindenting

" Set searching options
set ignorecase          " foo matches foo, Foo and FOO
set smartcase           " Foo matches Foo only
set incsearch           " highlight search pattern while typing
set hlsearch            " when done keep highlighting

" Syntax highlighting settings
if &t_Co > 2 || has("gui_running")
  syntax on
endif

" Set color scheme
set background=dark
let g:dracula_italic = 0
let g:dracula_colorterm = 0
colorscheme dracula


" Toggle search highlighting
nnoremap <silent> <Leader>hh :set hlsearch! hlsearch?<CR>
" Highlight current word
nnoremap <Leader>hw :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>

" Folding settings
set foldlevelstart=1    " Folding root level open

" Invisible characters settings
set listchars=tab:>-,eol:Â¬,trail:~
nnoremap <silent> <Leader>hi :set list! list?<CR>

" Set complete option
set complete-=i " DO NOT scan included files when searching for completion
set completeopt=longest " the colors of the menu make it hard to read and almost useless

" SuperTab options
let g:SuperTabLongestEnhanced=1 " (default value: 0)

" Wildmenu settings
set wildmenu
set wildmode=longest,full
set wildignorecase


"
" Settings that require autocommands
"
if has("autocmd")
    " Put these in an autocmd group, so that we can delete them easily.
    augroup CursorLine   " Toggle cursorline on/off
        au!
        autocmd WinEnter,InsertLeave * set cursorline
        autocmd WinLeave,InsertEnter * set nocursorline
    augroup END

    augroup SyntaxHighlighting   " Syntax highlighting settings
        au!
        if &t_Co > 2 || has("gui_running")
          au BufEnter * syn sync fromstart
        endif
    augroup END

    augroup FileTypeSettings " File type settings
        " shiftwidth == sw, softtabstop == sts, expandtab == et
        " formatoptions == fo, iskeyword == isk, textwidth == tw
        au!
        autocmd FileType python setlocal tw=80 sw=4 sts=4 et fo-=t cc=99
        autocmd FileType javascript setlocal tw=80 ts=4 sw=4 sts=4 et fo-=t isk+="-,"
        autocmd FileType css setlocal tw=80 sw=4 sts=4 et fo-=t
        autocmd FileType html setlocal tw=80 sw=2 sts=2 et fo-=t
        autocmd FileType sql setlocal tw=80 et fo-=t
        autocmd FileType rst setlocal tw=70 sw=2 sts=2 et fo+=t
        autocmd FileType tcl setlocal tw=80 sw=4 sts=4 et fo-=t
        autocmd FileType markdown setlocal tw=80 sw=2 sts=2 et fo+=t
    augroup END

    augroup OnQuit
        au!
        " Close Vim if the last window is quickfix
        autocmd BufEnter *
                    \ if &buftype=="quickfix" && winbufnr(2) == -1 |
                    \   quit! |
                    \ endif
    augroup END

    augroup TrailingSpaces " Remove any trailing whitespace
        au!
        autocmd BufRead,BufWrite * if !&bin | silent! %s/\s\+$//ge | endif
    augroup END

endif " has("autocmd")

"
" Settings enabled only when vim is started from with pgsql
"
if match(getcwd(), "/pgsql") >=0 ||  match(getcwd(), "/postgresql") >= 0

  set cinoptions=(0
  set tabstop=4
  set shiftwidth=4
  set noexpandtab

endif

"
" Mappings and convinience commands/functions
"

" Space is a better leader
map <Space> <Leader>

" Remap CTRL-I and CTRL-O
" (since CTRL-I is <Tab> and the latter is taken by SuperTab plugin)
nnoremap <Leader>i <C-I>
nnoremap <Leader>o <C-O>

" Make mapping timeout a little bit longer
set timeout timeoutlen=1100

" Don't use Ex mode, use Q for formatting
noremap Q gq

" Avoid to completely lose text when typing C-u or C-w while in insert mode
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

" Toggle relative line numbers
nnoremap <silent> <Leader>rr :set relativenumber! relativenumber?<CR>

" Re-select the text block just pasted
nnoremap <Leader>vv V`]

" Quickly open the ~/.vimrc file
nnoremap <Leader>ev <C-w><C-v><C-l>:e $MYVIMRC<CR>

" Set paste/nopaste mapping
nnoremap <C-p><C-p> :set invpaste paste?<CR>
set pastetoggle=<C-p><C-p>

" Create Blank Newlines and stay in Normal mode
nnoremap <silent> <Leader>la m`o<Esc>``
nnoremap <silent> <Leader>lA m`O<Esc>``

" Map window management shortcut
nnoremap <silent> <Leader>wh <C-w>h
nnoremap <silent> <Leader>wj <C-w>j
nnoremap <silent> <Leader>wk <C-w>k
nnoremap <silent> <Leader>wl <C-w>l
nnoremap <silent> <Leader>ww <C-w>w

nnoremap <silent> <Leader>w= <C-w>=
nnoremap <silent> <Leader>w_ <C-w>_
nnoremap <silent> <Leader>w- <C-w>-
nnoremap <silent> <Leader>w+ <C-w>+
nnoremap <silent> <Leader>w< <C-w><
nnoremap <silent> <Leader>w> <C-w>>
nnoremap <silent> <Leader>ws <C-w>s
nnoremap <silent> <Leader>wv <C-w>v
nnoremap <silent> <Leader>wo <C-w>o
nnoremap <silent> <Leader>wc <C-w>c

nnoremap <silent> <TAB> <C-w>w
nnoremap <silent> [Z <C-w>W

" Close localfix and quickfix buffers
nnoremap <silent> <Leader>lc :lclose<CR>
nnoremap <silent> <Leader>lo :lopen<CR>
nnoremap <silent> <Leader>qc :cclose<CR>
nnoremap <silent> <Leader>qo :copen<CR>

" Close buffer
nnoremap <silent> <Leader>bc :bdelete<CR>
nnoremap <silent> <Leader>bn :bnext<CR>
nnoremap <silent> <Leader>bN :bNext<CR>
nnoremap <silent> <Leader>bp :bprevious<CR>

" Readline-like movements on the command line
cnoremap <C-a> <Home>
cnoremap <C-b> <Left>
" shadow cmdline mode see :help cmdline-window (TODO assess this section)
cnoremap <C-f> <Right>
cnoremap <C-d> <Delete>
cnoremap <M-b> <S-Left>
cnoremap <M-f> <S-Right>
cnoremap <M-d> <S-Right><Delete>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>
cnoremap <Esc>d <S-Right><Delete>
cnoremap <C-g> <C-c>

"
" Copy/Paste/Cut
"
if has('unnamedplus')
      set clipboard=unnamed,unnamedplus
endif
noremap <Leader>yy "+yy<CR>
noremap <Leader>x "+x<CR>
noremap <Leader>p "+p<CR>

" Open files shortcuts
noremap <leader>ee :e <C-R>=expand("%:h") . "/" <CR>
noremap <leader>ew :new %:p:h<CR>

"
" Abbreviations
"
cnoreabbrev W! w!
cnoreabbrev W w
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev Wqa wqa
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qa qall
cnoreabbrev Qall qall

"
" Plugin settings
"

" BufExplorer settings
let g:bufExplorerShowRelativePath=1  " Show relative paths.

" Grepper settings
runtime plugin/grepper.vim    " initialize g:grepper with default values
let g:grepper.tools = ['git', 'rg', 'grep'] " these tools are more than enough
let g:grepper.highlight = 1   " always highlight found matches
let g:grepper.searchreg = 1   " query is added to the last search register and search
let g:grepper.dir = 'repo,filecwd' " search first the repo root

" Grepper tools settings
let g:grepper.rg.grepprg .= ' --smart-case'   " Always use smart-case when using rg

" Grepper operator mappings
nmap gs  <plug>(GrepperOperator)
xmap gs  <plug>(GrepperOperator)

" Grepper command mappings
nnoremap <leader>gg :Grepper<cr>
nnoremap <leader>gf  :Grepper -tool rg -cword -noprompt<cr>
nnoremap <leader>gb  :Grepper -tool rg -cword -noprompt -buffers<cr>
nnoremap <leader>gs  :Grepper -stop<cr>

" Grepper command mappings depending from filetype
augroup GrepperFileTypeMappings
    autocmd!
    autocmd FileType python nnoremap <buffer> <localleader>gt :Grepper -cword -noprompt -tool rg -grepprg rg -H --no-heading --vimgrep --smart-case --type py<cr>
augroup END

" Grepper colors
highlight GrepperPrompt ctermfg=160 guifg=#ff0000 cterm=NONE
highlight qfFileName ctermfg=216 ctermbg=NONE cterm=NONE guifg=#ffaf87 guibg=NONE gui=NONE
"highlight qfLineNr ctermfg=238 ctermbg=NONE cterm=NONE guifg=#444444 guibg=NONE gui=NONE
"highlight qfSeparator ctermfg=243 ctermbg=NONE cterm=NONE guifg=#767676 guibg=NONE gui=NONE

" Gutentags settings
let g:gutentags_enabled = 1                 " Enable gutentags...
let g:gutentags_generate_on_missing = 0     " ...but don't write a tags file if not already there
let g:gutentags_generate_on_new = 0         " ...unless you save the file.
let g:gutentags_file_list_command = { 'markers': { '.git': 'git ls-files', '.hg': 'hg files' } }
" Set Gutentags to index just python files when a python project is detected
" (detection is performed by Gutentags itself; read `:help gutentags_project_info`
" for more info). Also don't index 'import' occurences of any tags.
let g:gutentags_ctags_executable_python = 'ctags --languages=python --python-kinds=-i'

let g:gutentags_define_advanced_commands = 1    " Enable advanced command (e.g. GutentagsToggleEnabled)
nmap <leader>ct :GutentagsToggleEnabled<CR>

" Yankstack settings
let g:yankstack_map_keys = 0
nmap <leader>p <Plug>yankstack_substitute_older_paste
nmap <leader>P <Plug>yankstack_substitute_newer_paste

" Rainbow settings
let g:rainbow_active = 1
hi MatchParen ctermbg=0

" Python Enhanced Syntax Highlighting
highlight def link pythonClassVar Special
let g:python_version_2 = 0
let g:python_highlight_all = 1

" ALE settings
let g:ale_linters_explicit = 1                       " Only run linters explicitly enabled
let g:ale_linters = { 'python': ['pylint'] }         " Enabled linters
let g:ale_lint_on_text_changed = 'never'             " Never run linters automatically
let g:ale_lint_on_save = 1                           " Run linters on file save
let g:ale_open_list = 'on_save'                      " Open loclist on save only

let g:ale_fixers = {'python': ['black']}             " Enabled fixers
let g:ale_fix_on_save = 1                            " Run fixers on file save
let g:ale_set_highlights = 0                         " Disable highlighting (signs are enough)

" Automatically close loclist when buffer is closed
augroup CloseLoclistWindowGroup
    autocmd!
    autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END

function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction

" Vim-test settings
let test#strategy = 'dispatch'
let test#python#nose#options = '-s --no-color'
let test#python#pytest#options = '--color=no'
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tv :TestVisit<CR>

" Session settings
set sessionoptions=buffers,curdir,folds
let g:session_autoload='no'

"
" Set the status line
"

set statusline=%<                                      " truncate line at the beginning if it is too long
set statusline+=%n                                     " buffer number
set statusline+=\ %f                                   " file name (relative)
set statusline+=\ %m                                   " modified flag
set statusline+=\ %h                                   " help buffer flag
set statusline+=%r                                     " read-only buffer flag
set statusline+=\ %{FugitiveStatusline()}              " show git information
set statusline+=%=                                     " separation point between left and right
set statusline+=\[%b,\0\x%B\]                          " value of the character under cursor (decimal, hex)
set statusline+=\ \[%{&ff}\]                           " file-format
set statusline+=\ %l,%c%V\ %P                          " line, column, virtual col, percentage
set statusline+=\ %{grepper#statusline()}              " show grepper activity (if any)
set statusline+=\ %{gutentags#statusline(\"[\",\"]\")} " show gutentags activity (if any)
set statusline+=\ %{LinterStatus()}                    " show ALE information

"
" GUI specific settings
"
if has("gui_running")
    "set go-=T
    "set go-=L
    "set go-=r
    "set go-=m
    "set go-=b
endif

"
" Platform specific settings
"
if s:uname == "Darwin"  " Mac specific stuff
    " Copy and Paste settings
    nnoremap <F6> :.w !pbcopy<CR><CR>
    vnoremap <F6> :w !pbcopy<CR><CR>
    nnoremap <F7> :r !pbpaste<CR>
    inoremap <F7> <ESC>:r !pbpaste<CR>A

elseif s:uname == "linux" " Linux specific stuff
else " Unkwon platform
endif

if &diff
    if has("autocmd")
        " Avoid trailing spaces removal when merging
        autocmd! TrailingSpaces
    endif

    set diffopt+=foldcolumn:0
    nnoremap <Leader>dp :diffput<CR>
    vnoremap <Leader>dp :diffput<CR>
else
    " DiffChanges settings
    nnoremap <silent> <Leader>df :DiffChanges<CR>
    nnoremap <silent> <Leader>dt :DiffChangesDiffToggle<CR>
    nnoremap <silent> <Leader>dp :DiffChangesPatchToggle<CR>
endif
